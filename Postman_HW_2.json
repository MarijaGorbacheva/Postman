{
	"info": {
		"_postman_id": "25d71fe0-9798-43ad-8043-875178b525b8",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25843761"
	},
	"item": [
		{
			"name": "#1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"leader\"\r\n}"
				},
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "#2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//  Спарсить response body в json.\r",
							" var jsonData = pm.response.json();\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"var resp_name = jsonData.name;\r",
							"pm.test(\"строчка 4\", function () {\r",
							"    pm.expect(resp_name).to.eql(\"Masha\");\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request\r",
							"var resp_age = jsonData.age;\r",
							"pm.test(\"строчка 5\", function () {\r",
							"    pm.expect(resp_age).to.eql(\"26\");\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request\r",
							"var resp_salary = jsonData.salary;\r",
							"pm.test(\"строчка 6\", function () {\r",
							"    pm.expect(resp_salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"// Спарсить request.\r",
							"var req = request.data;\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"var req_name = req.name;\r",
							"pm.test(\"8 строчка\", function () {\r",
							"    pm.expect(req_name).to.eql(resp_name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"var req_age = req.age;\r",
							"pm.test(\"9  строчка\", function () {\r",
							"    pm.expect(req_age).to.eql(resp_age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"var req_salary = +req.salary;\r",
							"pm.test(\"10 строчка\", function () {\r",
							"    pm.expect(req_salary).to.eql(resp_salary);\r",
							"});\r",
							"console.log(\"resp_salary =\", resp_salary);\r",
							"console.log(\"req_salary =\", req_salary);\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"var resp_family = jsonData.family;\r",
							"console.log(resp_family);\r",
							"\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"var resp_u_salary = jsonData.family.u_salary_1_5_year;\r",
							"pm.test(\"12 строчка\", function () {\r",
							"    pm.expect(resp_u_salary).to.eql(req_salary*4);\r",
							"});\r",
							"console.log(resp_u_salary);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Masha",
							"type": "text"
						},
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "#3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json. Спарсить request. \r",
							"var jsonData = pm.response.json();\r",
							"var req = pm.request.url.query.toObject()\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"var resp_name = jsonData.name\r",
							"var req_name = req.name\r",
							"pm.test(\"5 строка\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"console.log(resp_name)\r",
							"console.log(req_name)\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"var resp_age = jsonData.age\r",
							"var req_age = req.age\r",
							"pm.test(\"6 строка\", function () {\r",
							"    pm.expect(req_age).to.eql(resp_age);\r",
							"});\r",
							"console.log(req_age)\r",
							"console.log(resp_age)\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"var resp_salary = jsonData.salary\r",
							"var req_salary = req.salary\r",
							"pm.test(\"7 строка\", function () {\r",
							"    pm.expect(resp_salary).to.eql(+req_salary);\r",
							"});\r",
							"console.log(resp_salary)\r",
							"console.log(req_salary)\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры name.\r",
							"var name = jsonData.family.pets.dog.name\r",
							"pm.test(\"9 строка\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"name\");\r",
							"});\r",
							"console.log(name)\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"var resp_salary = jsonData.salary\r",
							"var req_salary = req_salary\r",
							" pm.test(\"10 строка\", function () {\r",
							"    pm.expect(resp_salary).to.eql(+req_salary);\r",
							"});\r",
							"console.log(resp_salary)\r",
							"console.log(req_salary)\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"var family = jsonData.family\r",
							"console.log(family)\r",
							"\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"var resp_u_salary_1_5_year = jsonData.family.u_salary_1_5_year\r",
							" pm.test(\"12 строка\", function () {\r",
							"    pm.expect(resp_u_salary_1_5_year).to.eql(+req_salary*4);\r",
							"});\r",
							"console.log(resp_u_salary_1_5_year)\r",
							"console.log(req_salary*4)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Masha&age=26&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Masha"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "#4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json. Спарсить request. \r",
							"var jsonData = pm.response.json()\r",
							"var req = pm.request.url.query.toObject()\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"var resp_name = jsonData.name\r",
							"var req_name = req.name\r",
							"pm.test(\"5 строка\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"console.log(resp_name)\r",
							"console.log(req_name)\r",
							"\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"var resp_age = jsonData.age\r",
							"var req_age = +req.age\r",
							"pm.test(\"6 строка\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"console.log(resp_age)\r",
							"console.log(req_age)\r",
							"\r",
							"// Вывести в консоль параметр salary из request.\r",
							"var req_salary = req.salary\r",
							"console.log(req_salary)\r",
							"\r",
							"// Вывести в консоль параметр salary из response. Вывести в консоль 0-й, 1-й, 2-й элемент параметра salary из response.\r",
							"var resp_salary = jsonData.salary\r",
							"console.log(resp_salary)\r",
							"console.log(resp_salary[0])\r",
							"console.log(resp_salary[1])\r",
							"console.log(resp_salary[2])\r",
							"\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"12 строка\", function () {\r",
							"    pm.expect(resp_salary[0]).to.eql(+req_salary);\r",
							"});\r",
							"\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"13 строка\", function () {\r",
							"    pm.expect(+resp_salary[1]).to.eql(+req_salary*2);\r",
							"});\r",
							"\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"14 строка\", function () {\r",
							"    pm.expect(+resp_salary[2]).to.eql(+req_salary*3);\r",
							"});\r",
							"\r",
							"// Создать и передать в окружении переменную name, age, salary\r",
							"pm.environment.set(\"name\", \"Masha\");\r",
							"pm.environment.set(\"age\", \"26\");\r",
							"pm.environment.set(\"salary\", \"1000\");\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"console.log(jsonData.salary)\r",
							"console.log(jsonData.salary.length)\r",
							"for (var i = 0; i <= jsonData.salary.length; i++){\r",
							"    console.log(jsonData.salary[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Masha&age=26&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Masha"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "#5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json. Спарсить request.\r",
							"var jsonData = pm.response.json();\r",
							"var req = request.data\r",
							"\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"8 строка\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"9 строка\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"10 строка\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"11 строка\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"12 строка\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test(\"13 строка\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"person\");\r",
							"});\r",
							"\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"var start_qa_salary = jsonData.start_qa_salary\r",
							"var req_salary = req.salary\r",
							"pm.test(\"14 строка\", function () {\r",
							"    pm.expect(start_qa_salary).to.eql(+req_salary);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"var qa_salary_after_6_months = jsonData.qa_salary_after_6_months\r",
							"pm.test(\"15 строка\", function () {\r",
							"    pm.expect(qa_salary_after_6_months).to.eql(+req_salary*2);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"var qa_salary_after_12_months = jsonData.qa_salary_after_12_months\r",
							"pm.test(\"16 строка\", function () {\r",
							"    pm.expect(qa_salary_after_12_months).to.eql(req_salary*2.7);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"var qa_salary_after_1_5_year = jsonData[\"qa_salary_after_1.5_year\"];\r",
							"pm.test(\"17 строка\", function () {\r",
							"    pm.expect(qa_salary_after_1_5_year).to.eql(req_salary*3.3);\r",
							"});\r",
							"console.log(qa_salary_after_1_5_year)\r",
							"console.log(req_salary*3.3)\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"var qa_salary_after_3_5_years = jsonData[\"qa_salary_after_3.5_years\"];\r",
							"pm.test(\"18 строка\", function () {\r",
							"    pm.expect(qa_salary_after_3_5_years).to.eql(req_salary*3.8);\r",
							"});\r",
							"console.log(qa_salary_after_3_5_years)\r",
							"console.log(req_salary*3.8)\r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"var resp_name_1 = jsonData.person.u_name\r",
							"pm.test(\"19 строка\", function () {\r",
							"    pm.expect(resp_name_1[1]).to.eql(+req_salary);\r",
							"});\r",
							"\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"var resp_age = jsonData.u_age\r",
							"var req_age = req.req_age\r",
							"pm.test(\"20 строка\", function () {\r",
							"    pm.expect(req_age).to.eql(resp_age);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"var resp_u_salary_5_years = jsonData.person.u_salary_5_years\r",
							"pm.test(\"21 строка\", function () {\r",
							"    pm.expect(resp_u_salary_5_years).to.eql(+req_salary*4.2);\r",
							"});\r",
							"console.log(req_salary*4.2)\r",
							"console.log(resp_u_salary_5_years)\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"var list = Object.entries(jsonData)\r",
							"var list_person = Object.entries(jsonData.person)\r",
							"\r",
							"for (var i of list){\r",
							"    console.log(i)\r",
							"    break\r",
							"}\r",
							"for (var i of list_person){\r",
							"    console.log(i)\r",
							"}\r",
							"for (var i = 1; i < list.length; i++){\r",
							"    console.log(list[i])\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}
